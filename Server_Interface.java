/* Part of Server module    
 * Communicates with client 
 * Author:Dhruv raj singh rathore
 * Creation date:3 September 2014
 */

package server;
import java.net.*;
import java.util.*;
import java.io.*;


public class Interface extends javax.swing.JFrame {
   ArrayList clientOutputStreams;
   ArrayList<String> online_user;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }
    public class ClientHandler implements Runnable
            {
                Socket client_Socket;
                PrintWriter writer;
                BufferedReader reader;
                public ClientHandler(Socket client,PrintWriter writer_inp)
                        {
                           client_Socket=client;
                           writer=writer_inp;
                           try{
                                    InputStreamReader isBuff=new InputStreamReader(client.getInputStream());
                                    reader=new BufferedReader(isBuff);
                           }
                           catch(Exception ex)
                           {
                              txtout.append("Error in InputStreamReader\n");
                           }
                        }   
                public void run()
                {
                    String working;
                    String temp[];
                    try
                    {
                         while( (working=reader.readLine())!=null )   
                         {
                                 //  txtout.append("");
                             temp=working.split(":");
                             for(String itr:temp)
                                 txtout.append(itr+" ");
                             txtout.append("\n");
                             if(temp[2].equals("Chat"))
                             {
                                   tellEveryone(working);
                             }    
                             else if(temp[2].equals("Connect"))
                             {
                                   tellEveryone( (temp[0]+":"+temp[1]+":"+"Chat") );
                                   userAdd(temp[0]);
                             }    
                             else if(temp[2].equals("Disconnect"))
                             {
                                 tellEveryone( (temp[0]+": has disconnected."+":"+"Chat") );
                             }
                             else
                                  txtout.append("No symbol matched in input stream \n");
                         }
                    }
                    catch(Exception ex)
                            {
                                txtout.append("Lost a connection. \n");
                                clientOutputStreams.remove(writer);
                            }                      
                }        
            }
    public class ServerStart implements Runnable
    {
        public void run()
        {
           clientOutputStreams = new ArrayList();
           online_user = new ArrayList();
                            try {
                    	ServerSocket serverSock = new ServerSocket(5000);

                    	while (true) {
				// set up the server writer function and then begin at the same
			  	// the listener using the Runnable and Thread
				Socket Sock_client = serverSock.accept();
				PrintWriter writer = new PrintWriter(Sock_client.getOutputStream());
                                
				clientOutputStreams.add(writer);

				// use a Runnable to start a 'second main method that will run
				// the listener
				Thread listener = new Thread(new ClientHandler(Sock_client, writer));
				listener.start();
				txtout.append("Got a connection. \n");
			} // end while
		} // end try
		catch (IOException ex)
		{
			txtout.append("Error making a connection. \n");
		}
        }        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtout = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtout.setEditable(false);
        txtout.setColumns(20);
        txtout.setRows(5);
        jScrollPane1.setViewportView(txtout);

        jButton1.setText("Start ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       
        Thread starter = new Thread(new ServerStart());
        starter.start();
        
    }                                        

public void userAdd (String data) {
            String message, add = ": :Connect", done = "Server: :Done", name = data;
            online_user.add(name);
            String[] tempList = new String[(online_user.size())];
            online_user.toArray(tempList);

                for (String token:tempList) {

                    message = (token + add);
                    tellEveryone(message);
                }
                tellEveryone(done);
	}

	public void userRemove (String data) {
                String message, add = ": :Connect", done = "Server: :Done", name = data;
                online_user.remove(name);
                String[] tempList = new String[(online_user.size())];
		online_user.toArray(tempList);

                for (String token:tempList) {

                    message = (token + add);
                    tellEveryone(message);
                }
                tellEveryone(done);
  	}

        public void tellEveryone(String message) {
	// sends message to everyone connected to server
		Iterator it = clientOutputStreams.iterator();

		while (it.hasNext()) {
			try {
				PrintWriter writer = (PrintWriter) it.next();
				writer.println(message);
				txtout.append("Sending: " + message + "\n");
                                writer.flush();
                                txtout.setCaretPosition(txtout.getDocument().getLength());

			} // end try
			catch (Exception ex) {
          			txtout.append("Error telling everyone. \n");
			} // end catch
		} // end while
	} // end tellEveryone()    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtout;
    // End of variables declaration                   
}
